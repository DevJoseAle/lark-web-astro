---
export const prerender = true; 
import { translations } from "../i18n/translations";
import Layout from "../layouts/Layout.astro";



const t = translations.en;
---

<Layout title="Donate - Search Campaigns" lang="en">
  <section class="donate-hero">
    <div class="hero-content">
      <h1 data-animate>{t.donate.title}</h1>
      <p data-animate style="animation-delay: 0.1s;">{t.donate.subtitle}</p>
    </div>
  </section>

  <section class="search-section">
    <div class="container">
      <div class="search-box glass" data-animate style="animation-delay: 0.2s;">
        <div class="search-input-wrapper">
          <svg class="search-icon" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <circle cx="11" cy="11" r="8" stroke="currentColor" stroke-width="2"/>
            <path d="M21 21L16.65 16.65" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          </svg>
          <input 
            type="text" 
            id="searchInput" 
            placeholder="Enter campaign ID (e.g., LARK-1234)"
            class="search-input"
          />
        </div>
        <button id="searchButton" class="search-button">
          <span>Search</span>
          <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
            <path d="M4 10H16M16 10L10 4M16 10L10 16" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
      </div>

      <div id="results" class="results-container">
        <div class="empty-state">
          <svg width="80" height="80" viewBox="0 0 80 80" fill="none" class="empty-icon">
            <circle cx="35" cy="35" r="20" stroke="currentColor" stroke-width="3" opacity="0.3"/>
            <path d="M52 52L65 65" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
          </svg>
          <p class="help-text">Enter a campaign ID to search</p>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
import { supabase } from "../lib/supabase";
import { getCountryFlag, formatCurrency } from "../lib/utils";



  const searchInput = document.getElementById('searchInput') as HTMLInputElement;
  const searchButton = document.getElementById('searchButton') as HTMLButtonElement;
  const resultsContainer = document.getElementById('results') as HTMLDivElement;

  async function searchCampaign(shortCode: string) {
    const trimmedCode = shortCode.trim().toUpperCase();

    if (!trimmedCode || trimmedCode.length < 3) {
      resultsContainer.innerHTML = `
        <div class="empty-state">
          <svg width="80" height="80" viewBox="0 0 80 80" fill="none" class="empty-icon">
            <circle cx="35" cy="35" r="20" stroke="currentColor" stroke-width="3" opacity="0.3"/>
            <path d="M52 52L65 65" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
          </svg>
          <p class="help-text">Enter at least 3 characters</p>
        </div>
      `;
      return;
    }

resultsContainer.innerHTML = `
  <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; 
              padding: 4rem 2rem; text-align: center; color: white; gap: 1.5rem; min-height: 400px;">
    <div style="width: 50px; height: 50px; border: 3px solid rgba(255, 255, 255, 0.1); 
                border-top-color: #007AFF; border-radius: 50%; animation: spin 1s linear infinite;"></div>
    <p style="font-size: 1.125rem; color: rgba(255, 255, 255, 0.8); margin: 0;">Searching campaign...</p>
  </div>
`;

    try {
      const { data: campaign, error } = await supabase
        .from('campaigns')
        .select(`
          short_code,
          title,
          country,
          goal_amount,
          currency,
          campaign_images(image_url, is_primary)
        `)
        .eq('status', 'active')
        .ilike('short_code', trimmedCode)
        .maybeSingle();

      if (error) throw error;

      if (!campaign) {
        resultsContainer.innerHTML = `
          <div class="no-results">
            <svg width="80" height="80" viewBox="0 0 80 80" fill="none" class="empty-icon">
              <circle cx="40" cy="40" r="30" stroke="currentColor" stroke-width="3" opacity="0.3"/>
              <path d="M30 35H50M35 50H45" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
            </svg>
            <p class="no-results-text">No campaign found with ID: <strong>${trimmedCode}</strong></p>
            <p class="help-text">Please verify the campaign ID and try again</p>
          </div>
        `;
        return;
      }

      const primaryImage = campaign.campaign_images?.find((img: any) => img.is_primary)?.image_url 
        || campaign.campaign_images?.[0]?.image_url 
        || 'https://images.unsplash.com/photo-1579621970563-ebec7560ff3e?w=800&q=80';
      
      const countryFlag = getCountryFlag(campaign.country);

      // ✅ INLINE STYLES - Esta es la clave
      resultsContainer.innerHTML = `
        <div style="max-width: 800px; margin: 0 auto; animation: fadeInUp 0.4s ease;">
          <p style="text-align: center; color: #34C759; font-size: 1.125rem; font-weight: 600; margin-bottom: 2rem;">
            ✓ Campaign found!
          </p>
          
          <a href="/campaign/${campaign.short_code}" 
             style="display: flex; align-items: center; gap: 1.5rem; padding: 1.5rem; 
                    background: rgba(255, 255, 255, 0.05); backdrop-filter: blur(20px); 
                    border: 1px solid rgba(255, 255, 255, 0.1); border-radius: 16px; 
                    transition: all 0.2s ease; text-decoration: none; color: white; cursor: pointer;"
             onmouseover="this.style.background='rgba(255, 255, 255, 0.08)'; this.style.borderColor='rgba(0, 122, 255, 0.3)'; this.style.transform='translateX(8px)'; this.style.boxShadow='0 8px 24px rgba(0, 122, 255, 0.15)';"
             onmouseout="this.style.background='rgba(255, 255, 255, 0.05)'; this.style.borderColor='rgba(255, 255, 255, 0.1)'; this.style.transform='translateX(0)'; this.style.boxShadow='none';">
            
            <img src="${primaryImage}" alt="${campaign.title}" 
                 style="width: 80px; height: 80px; border-radius: 12px; object-fit: cover; 
                        flex-shrink: 0; border: 2px solid rgba(255, 255, 255, 0.1);">
            
            <div style="flex: 1; display: flex; flex-direction: column; gap: 0.5rem; min-width: 0;">
              <div style="display: flex; align-items: center; gap: 0.75rem;">
                <span style="font-size: 0.875rem; font-weight: 600; color: #007AFF; 
                             font-family: 'Courier New', monospace; text-transform: uppercase; letter-spacing: 0.05em;">
                  ${countryFlag} ${campaign.short_code}
                </span>
              </div>
              
              <h3 style="font-size: 1.25rem; font-weight: 700; line-height: 1.3; margin: 0; 
                         color: white; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                ${campaign.title}
              </h3>
              
              <div style="display: flex; align-items: center; gap: 0.5rem; font-size: 0.9375rem;">
                <span style="color: rgba(255, 255, 255, 0.6); font-weight: 500;">Goal:</span>
                <span style="color: #34C759; font-weight: 700;">${formatCurrency(campaign.goal_amount, campaign.currency)}</span>
              </div>
            </div>
            
            <div style="flex-shrink: 0; color: rgba(255, 255, 255, 0.4); transition: all 0.2s ease;">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M9 5L16 12L9 19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
          </a>
        </div>
      `;

    } catch (error) {
      console.error('Search error:', error);
      resultsContainer.innerHTML = `
        <div class="error-state">
          <svg width="80" height="80" viewBox="0 0 80 80" fill="none" class="empty-icon">
            <circle cx="40" cy="40" r="30" stroke="currentColor" stroke-width="3" opacity="0.3"/>
            <path d="M40 25V45M40 55V57" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
          </svg>
          <p class="error-text">Error searching campaign. Please try again.</p>
        </div>
      `;
    }
  }

  searchButton?.addEventListener('click', () => {
    searchCampaign(searchInput.value);
  });

  searchInput?.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      searchCampaign(searchInput.value);
    }
  });

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animate-in');
        observer.unobserve(entry.target);
      }
    });
  }, { threshold: 0.1 });

  document.querySelectorAll('[data-animate]').forEach(el => {
    observer.observe(el);
  });
</script>

<style>
  /* Estos estilos SÍ funcionan porque son para elementos estáticos */
  .donate-hero {
    padding: 6rem 2rem 4rem;
    text-align: center;
    position: relative;
    overflow: hidden;
  }

  .donate-hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 500px;
    height: 500px;
    background: radial-gradient(circle, rgba(0, 122, 255, 0.15) 0%, transparent 70%);
    filter: blur(60px);
    z-index: 0;
  }

  .hero-content {
    position: relative;
    z-index: 1;
    max-width: 800px;
    margin: 0 auto;
    color: white;
  }

  .hero-content h1 {
    font-size: clamp(2.5rem, 5vw, 3.5rem);
    font-weight: 800;
    margin-bottom: 1rem;
    letter-spacing: -0.02em;
  }

  .hero-content p {
    font-size: clamp(1.125rem, 2vw, 1.5rem);
    color: rgba(255, 255, 255, 0.8);
  }

  .search-section {
    padding: 2rem 0 6rem;
  }

  .search-box {
    display: flex;
    gap: 1rem;
    max-width: 700px;
    margin: 0 auto 4rem;
    padding: 1rem;
    border-radius: var(--radius-lg);
    align-items: center;
  }

  .search-input-wrapper {
    flex: 1;
    position: relative;
    display: flex;
    align-items: center;
  }

  .search-icon {
    position: absolute;
    left: 1.5rem;
    color: rgba(255, 255, 255, 0.5);
    pointer-events: none;
  }
@keyframes spin {
  to { transform: rotate(360deg); }
}
  .search-input {
    width: 100%;
    padding: 1.25rem 1.5rem 1.25rem 4rem;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: var(--radius-md);
    color: white;
    font-size: 1.125rem;
    outline: none;
    transition: all var(--transition-base);
    text-transform: uppercase;
  }

  .search-input::placeholder {
    color: rgba(255, 255, 255, 0.5);
    text-transform: none;
  }

  .search-input:focus {
    border-color: var(--blue-primary);
    background: rgba(255, 255, 255, 0.08);
  }

  .search-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1.25rem 2rem;
    background: var(--blue-primary);
    color: white;
    border: none;
    border-radius: var(--radius-md);
    font-size: 1.125rem;
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-base);
    white-space: nowrap;
  }

  .search-button:hover {
    background: var(--blue-light);
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(0, 122, 255, 0.3);
  }

  .results-container {
    min-height: 400px;
  }

  .empty-state,
  .loading-state,
  .no-results,
  .error-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 4rem 2rem;
    text-align: center;
    color: white;
  }

  .empty-icon {
    color: rgba(255, 255, 255, 0.3);
    margin-bottom: 2rem;
  }

  .help-text {
    font-size: 1.125rem;
    color: rgba(255, 255, 255, 0.6);
  }

  .loading-state {
    gap: 1.5rem;
  }

  .spinner {
    width: 50px;
    height: 50px;
    border: 3px solid rgba(255, 255, 255, 0.1);
    border-top-color: var(--blue-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .no-results-text {
    font-size: 1.25rem;
    margin-bottom: 1rem;
  }

  .no-results strong {
    color: var(--blue-primary);
  }

  .error-text {
    color: #EF4444;
    font-size: 1.125rem;
  }

  [data-animate] {
    opacity: 0;
    transform: translateY(30px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }

  [data-animate].animate-in {
    opacity: 1;
    transform: translateY(0);
  }
</style>