---
export const prerender = false;

import { translations } from "../../i18n/translations";
import Layout from "../../layouts/Layout.astro";
import { supabase } from "../../lib/supabase";
import {
  detectUserCountry,
  getUserCurrency,
  convertCurrency,
  formatCurrency as formatCurrencyAdvanced,
  CURRENCIES,
} from "../../lib/currency";

const { id } = Astro.params;
const lang = "en";
const t = translations[lang].campaignDetail;

// ‚úÖ DETECTAR PA√çS DEL USUARIO
// üß™ TESTING: Cambia 'US', 'MX', 'CO', 'CL' para simular
const userCountry = "US"; // ‚Üê CAMBIA ESTO PARA PROBAR
// const userCountry = await detectUserCountry(Astro.request); // ‚Üê Descomentar para producci√≥n
const userCurrency = getUserCurrency(userCountry);

// //console.log("==========================================");
// //console.log("üåç User Country:", userCountry);
// //console.log("üíµ User Currency:", userCurrency);
// //console.log("üîç [EN] Campaign ID:", id);
// //console.log("üîç [EN] ID type:", typeof id);
// //console.log("üîç [EN] Calling Edge Function: get-campaign");

// Fetch campaign using Supabase client
let campaign: any = null;
let error: any = null;

try {
  //console.log("üì° [EN] Invoking Edge Function...");

  const { data, error: fetchError } = await supabase.functions.invoke(
    "get-full-campaign",
    {
      body: { id: id },
    },
  );

  //console.log("üì¶ [EN] Response data:", data);
  //console.log("‚ùå [EN] Response error:", fetchError);

  if (fetchError) {
    console.error("üö® [EN] Edge Function error:", fetchError);
    error = fetchError;
  } else if (data?.error) {
    console.error("üö® [EN] Data contains error:", data.error);
    error = data.error;
  } else if (data?.data) {
    //console.log("‚úÖ [EN] Campaign found:", data.data.title);
    campaign = data.data;
  } else {
    //console.log("‚ö†Ô∏è [EN] No data returned");
    error = "No campaign data";
  }
} catch (e) {
  console.error("üí• [EN] Exception:", e);
  error = e;
}

//console.log("üéØ [EN] Final campaign:", campaign ? campaign.title : "NULL");
//console.log("üö® [EN] Final error:", error);

// If campaign not found, redirect to 404
if (!campaign || error) {
  //console.log("‚ö†Ô∏è [EN] Redirecting to /404");
  return Astro.redirect("/404");
}

//console.log("‚úÖ [EN] Campaign loaded successfully");

// ‚úÖ CONVERTIR MONTOS PARA DISPLAY
const campaignCurrency = campaign.currency || "CLP";
const displayCurrency = userCurrency;

//console.log("üí∞ Campaign Currency:", campaignCurrency);
//console.log("üíµ Display Currency:", displayCurrency);

const goalAmountDisplay = convertCurrency(
  campaign.goal_amount,
  campaignCurrency,
  displayCurrency,
);

const currentAmountDisplay = convertCurrency(
  campaign.current_amount || 0,
  campaignCurrency,
  displayCurrency,
);

// ‚úÖ CONVERTIR SOFT CAP Y HARD CAP
const softCapDisplay =
  campaign.soft_cap > 0
    ? convertCurrency(campaign.soft_cap, campaignCurrency, displayCurrency)
    : 0;

const hardCapDisplay =
  campaign.hard_cap > 0
    ? convertCurrency(campaign.hard_cap, campaignCurrency, displayCurrency)
    : 0;

//console.log("üéØ Goal Amount Display:", goalAmountDisplay, displayCurrency);
//console.log(
//   "üìä Current Amount Display:",
//   currentAmountDisplay,
//   displayCurrency,
// );
//console.log("üéØ Soft Cap Display:", softCapDisplay, displayCurrency);
//console.log("üöÄ Hard Cap Display:", hardCapDisplay, displayCurrency);

// Calculate progress
const progress =
  campaign.goal_amount > 0
    ? (campaign.current_amount / campaign.goal_amount) * 100
    : 0;

const softCapProgress =
  campaign.soft_cap && campaign.goal_amount > 0
    ? (campaign.soft_cap / campaign.goal_amount) * 100
    : 0;

const hardCapProgress =
  campaign.hard_cap && campaign.goal_amount > 0
    ? (campaign.hard_cap / campaign.goal_amount) * 100
    : 0;

//console.log("üìä [EN] Progress:", progress.toFixed(2) + "%");

// Helper function for status text
const getStatusText = (status: string) => {
  const key = `status${status.charAt(0).toUpperCase() + status.slice(1)}` as
    | "statusActive"
    | "statusPaused"
    | "statusTriggered"
    | "statusCompleted"
    | "statusDraft";
  return t[key] || status;
};

// Images
const primaryImage = campaign.primaryImage;
const campaignImages =
  campaign.images?.filter((img: any) => img.image_type !== "diagnosis") || [];
const diagnosisImages =
  campaign.images?.filter((img: any) => img.image_type === "diagnosis") || [];

//console.log("üñºÔ∏è [EN] Primary image:", primaryImage?.image_url || "NONE");
//console.log("üñºÔ∏è [EN] Campaign images:", campaignImages.length);
//console.log("==========================================");
---

<Layout
  title={`${campaign.title} - ${t.pageTitle}`}
  description={campaign.description.slice(0, 160)}
  lang={lang}
>
  <!-- Breadcrumb -->
  <div class="breadcrumb container">
    <a href="/">{t.breadcrumbHome}</a>
    <span class="separator">‚Ä∫</span>
    <a href="/donate">{t.breadcrumbCampaigns}</a>
    <span class="separator">‚Ä∫</span>
    <span>{campaign.title}</span>
  </div>

  <!-- Campaign Content -->
  <section class="campaign-detail">
    <div class="container">
      <div class="campaign-grid">
        <!-- Left Column: Images & Description -->
        <div class="main-column">
          <!-- Hero Image -->
          <div class="hero-image glass" data-animate>
            {
              primaryImage ? (
                <img src={primaryImage.image_url} alt={campaign.title} />
              ) : (
                <img
                  src="https://images.unsplash.com/photo-1532629345422-7515f3d16bb6?w=800"
                  alt={campaign.title}
                />
              )
            }
            <div class="image-overlay">
              <span class="country-badge">{campaign.country}</span>
              <span class={`status-badge status-${campaign.status}`}>
                {getStatusText(campaign.status)}
              </span>
            </div>
          </div>

          <!-- Gallery Thumbnails -->
          {
            campaign.images.length > 1 && (
              <div class="gallery-thumbnails" data-animate>
                {campaign.images.map((image: any, index: number) => (
                  <button class="thumbnail glass" data-image={index}>
                    <img src={image.image_url} alt={`Image ${index + 1}`} />
                  </button>
                ))}
              </div>
            )
          }

          <!-- Campaign Header -->
          <div class="campaign-header" data-animate>
            <h1>{campaign.title}</h1>
            <p class="created-by">
              {t.createdBy}
              <strong>{campaign.owner?.display_name || "Anonymous"}</strong>
            </p>
          </div>

          <!-- About Section -->
          <div class="section-card glass" data-animate>
            <h2>{t.aboutTitle}</h2>
            <div class="description">
              {
                campaign.description
                  .split("\n\n")
                  .map((paragraph: string) => <p>{paragraph}</p>)
              }
            </div>
          </div>

          <!-- Beneficiaries Section -->
          {
            campaign.beneficiaries && campaign.beneficiaries.length > 0 && (
              <div class="section-card glass" data-animate>
                <h2>{t.beneficiariesTitle}</h2>
                <div class="beneficiaries-list">
                  {campaign.beneficiaries.map((beneficiary: any) => (
                    <div class="beneficiary-item">
                      <div class="beneficiary-avatar">
                        {beneficiary.user?.display_name?.charAt(0) || "B"}
                      </div>
                      <div class="beneficiary-info">
                        <strong>{beneficiary.user.display_name}</strong>
                        <span class="share">
                          {beneficiary.share_type === "percent"
                            ? `${beneficiary.share_value}% ${t.sharePercentage}`
                            : `$${beneficiary.share_value} ${t.shareFixed}`}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )
          }

          <!-- Diagnosis Section (if available) -->
          {
            campaign.has_diagnosis && (
              <div class="section-card glass" data-animate>
                <h2>{t.diagnosisTitle}</h2>
                <div class="diagnosis-images">
                  {campaign.images
                    .filter((img: any) => img.image_type === "diagnosis")
                    .map((image: any) => (
                      <div class="diagnosis-image">
                        <img src={image.image_url} alt="Diagnosis document" />
                      </div>
                    ))}
                </div>
                <p class="diagnosis-note">
                  Medical documentation has been provided and verified.
                </p>
              </div>
            )
          }
        </div>

        <!-- Right Column: Donation Card (Sticky) -->
        <aside class="donation-sidebar">
          <!-- Progress Card -->
          <div class="donation-card glass" data-animate>
            <!-- Amount Raised -->
            <div class="amount-raised">
              <div class="current-amount">
                {formatCurrencyAdvanced(currentAmountDisplay, displayCurrency)}
              </div>
              <div class="goal-text">
                {t.raised}
                {t.of}
                {formatCurrencyAdvanced(goalAmountDisplay, displayCurrency)}
                {t.goal}
              </div>

              {
                displayCurrency !== campaignCurrency && (
                  <div class="conversion-note">
                    ‚âà{" "}
                    {formatCurrencyAdvanced(
                      campaign.current_amount || 0,
                      campaignCurrency,
                    )}{" "}
                    {campaignCurrency}
                  </div>
                )
              }
            </div>

            <!-- Progress Bar -->
            <div class="progress-container">
              <div class="progress-bar">
                <div
                  class="progress-fill"
                  style={`width: ${Math.min(progress, 100)}%`}
                >
                </div>

                {/* Soft Cap Marker */}
                {
                  campaign.soft_cap > 0 && (
                    <div
                      class="cap-marker soft-cap"
                      style={`left: ${softCapProgress}%`}
                      title={`${t.softCap}: ${formatCurrencyAdvanced(softCapDisplay, displayCurrency)}`}
                    >
                      <span class="cap-label">{t.softCap}</span>
                    </div>
                  )
                }

                {/* Hard Cap Marker */}
                {hardCapProgress <= 100 && (
                    <div
                      class="cap-marker hard-cap"
                      style={`left: ${hardCapProgress}%`}
                      title={`${t.hardCap}: ${formatCurrencyAdvanced(hardCapDisplay, displayCurrency)}`}
                    >
                      <span class="cap-label">{t.hardCap}</span>
                    </div>
                  )
                }
              </div>
              <div class="progress-stats">
                <span>{Math.round(progress)}% {t.progress}</span>
              </div>
            </div>

            {/* Caps Info */}
            {
              (campaign.soft_cap > 0 || campaign.hard_cap > 0) && (
                <div class="caps-info">
                  {campaign.soft_cap > 0 && (
                    <div class="cap-item">
                      <span class="cap-icon">üéØ</span>
                      <div>
                        <div class="cap-name">{t.softCap}</div>
                        <div class="cap-value">
                          {formatCurrencyAdvanced(
                            softCapDisplay,
                            displayCurrency,
                          )}
                        </div>
                      </div>
                    </div>
                  )}

                  {campaign.hard_cap > 0 && (
                    <div class="cap-item">
                      <span class="cap-icon">üöÄ</span>
                      <div>
                        <div class="cap-name">{t.hardCap}</div>
                        <div class="cap-value">
                          {formatCurrencyAdvanced(
                            hardCapDisplay,
                            displayCurrency,
                          )}
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              )
            }

            {/* Donation Amounts */}
            <div class="donate-section">
              <h3>{t.donateTitle}</h3>

              {
                displayCurrency !== campaignCurrency && (
                  <div class="currency-notice">
                    üí° Amounts shown in {displayCurrency}. You'll be charged in{" "}
                    {campaignCurrency}.
                  </div>
                )
              }

              <p class="select-amount-text">{t.selectAmount}</p>

              {/* Preset Amounts */}
              <div class="amount-buttons">
                <button class="amount-btn" data-amount="10">$10</button>
                <button class="amount-btn" data-amount="25">$25</button>
                <button class="amount-btn" data-amount="50">$50</button>
                <button class="amount-btn" data-amount="100">$100</button>
              </div>

              {/* Custom Amount */}
              <div class="custom-amount">
                <label>{t.customAmount}</label>
                <div class="custom-input-wrapper">
                  <span class="currency-symbol">$</span>
                    <input 
                      type="number" 
                      id="custom-amount" 
                      placeholder="50"
                      min="5"
                      step="1"
                      onkeypress="return (event.charCode >= 48 && event.charCode <= 57)"
                      oninput="this.value = this.value.replace(/[^0-9]/g, '')"
                    />
                </div>
              </div>

              <p class="minimum-note">{t.minimumDonation}</p>

              {/* Donate Button */}
              <button class="donate-button" id="donate-btn">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                  <path
                    d="M20.84 4.61C20.3292 4.099 19.7228 3.69364 19.0554 3.41708C18.3879 3.14052 17.6725 2.99817 16.95 2.99817C16.2275 2.99817 15.5121 3.14052 14.8446 3.41708C14.1772 3.69364 13.5708 4.099 13.06 4.61L12 5.67L10.94 4.61C9.9083 3.57831 8.50903 2.99871 7.05 2.99871C5.59096 2.99871 4.19169 3.57831 3.16 4.61C2.1283 5.64169 1.54871 7.04097 1.54871 8.5C1.54871 9.95903 2.1283 11.3583 3.16 12.39L4.22 13.45L12 21.23L19.78 13.45L20.84 12.39C21.351 11.8792 21.7564 11.2728 22.0329 10.6054C22.3095 9.93789 22.4518 9.22248 22.4518 8.5C22.4518 7.77752 22.3095 7.06211 22.0329 6.39464C21.7564 5.72718 21.351 5.12084 20.84 4.61Z"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"></path>
                </svg>
                {t.donateButton}
              </button>
            </div>

            {/* Campaign Details */}
            <div class="campaign-details">
              <h3>{t.detailsTitle}</h3>
              <div class="detail-item">
                <span class="detail-label">{t.country}:</span>
                <span class="detail-value">{campaign.country}</span>
              </div>
              <div class="detail-item">
                <span class="detail-label">{t.createdDate}:</span>
                <span class="detail-value">
                  {
                    new Date(campaign.created_at).toLocaleDateString("en-US", {
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                    })
                  }
                </span>
              </div>
              <div class="detail-item">
                <span class="detail-label">{t.startDate}:</span>
                <span class="detail-value">
                  {
                    new Date(campaign.start_at).toLocaleDateString("en-US", {
                      month: "short",
                      day: "numeric",
                      year: "numeric",
                    })
                  }
                </span>
              </div>
              <div class="detail-item">
                <span class="detail-label">{t.endDate}:</span>
                <span class="detail-value">
                  {
                    new Date(campaign.end_at).toLocaleDateString("en-US", {
                      month: "short",
                      day: "numeric",
                      year: "numeric",
                    })
                  }
                </span>
              </div>
            </div>

            {/* Share Section */}
            <div class="share-section">
              <h3>{t.shareTitle}</h3>
              <div class="share-buttons">
                <button class="share-btn whatsapp" data-share="whatsapp">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                    <path
                      d="M17.472 14.382C17.015 14.153 14.798 13.065 14.382 12.924C13.966 12.783 13.661 12.712 13.356 13.169C13.051 13.626 12.186 14.653 11.921 14.958C11.656 15.263 11.391 15.304 10.934 15.075C10.477 14.846 8.99303 14.363 7.24503 12.813C5.87803 11.608 4.96403 10.122 4.69903 9.665C4.43403 9.208 4.67203 8.961 4.90103 8.733C5.10703 8.528 5.35803 8.203 5.58703 7.938C5.81603 7.673 5.88703 7.489 6.02803 7.184C6.16903 6.879 6.09803 6.614 5.98303 6.385C5.86803 6.156 4.95703 3.936 4.58203 2.981C4.21603 2.05 3.84503 2.172 3.56303 2.158C3.29903 2.145 2.99403 2.142 2.68903 2.142C2.38403 2.142 1.92703 2.257 1.51103 2.714C1.09503 3.171 -0.0399704 4.259 -0.0399704 6.479C-0.0399704 8.699 1.55203 10.839 1.78103 11.144C2.01003 11.449 4.96103 15.946 9.47403 17.956C10.515 18.421 11.328 18.697 11.962 18.907C13.009 19.247 13.962 19.2 14.717 19.082C15.553 18.952 17.305 18.004 17.68 16.954C18.055 15.904 18.055 15.015 17.94 14.826C17.825 14.637 17.929 14.611 17.472 14.382Z"
                      fill="currentColor"></path>
                  </svg>
                </button>
                <button class="share-btn twitter" data-share="twitter">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                    <path
                      d="M23 3C22.0424 3.67548 20.9821 4.19211 19.86 4.53C19.2577 3.83751 18.4573 3.34669 17.567 3.12393C16.6767 2.90116 15.7395 2.95718 14.8821 3.2845C14.0247 3.61182 13.2884 4.19425 12.773 4.95372C12.2575 5.71319 11.9877 6.61078 12 7.53V8.53C10.2426 8.57557 8.50127 8.18581 6.93101 7.39545C5.36074 6.60508 4.01032 5.43864 3 4C3 4 -1 13 8 17C5.94053 18.398 3.48716 19.0989 1 19C10 24 21 19 21 7.5C20.9991 7.22145 20.9723 6.94359 20.92 6.67C21.9406 5.66349 22.6608 4.39271 23 3Z"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"></path>
                  </svg>
                </button>
                <button class="share-btn facebook" data-share="facebook">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                    <path
                      d="M18 2H15C13.6739 2 12.4021 2.52678 11.4645 3.46447C10.5268 4.40215 10 5.67392 10 7V10H7V14H10V22H14V14H17L18 10H14V7C14 6.73478 14.1054 6.48043 14.2929 6.29289C14.4804 6.10536 14.7348 6 15 6H18V2Z"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"></path>
                  </svg>
                </button>
                <button class="share-btn copy" data-share="copy" id="copy-link">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                    <path
                      d="M10 13C10.4295 13.5741 10.9774 14.0491 11.6066 14.3929C12.2357 14.7367 12.9315 14.9411 13.6467 14.9923C14.3618 15.0435 15.0796 14.9403 15.7513 14.6897C16.4231 14.4392 17.0331 14.047 17.54 13.54L20.54 10.54C21.4508 9.59695 21.9548 8.33394 21.9434 7.02296C21.932 5.71198 21.4061 4.45791 20.4791 3.53087C19.5521 2.60383 18.298 2.07799 16.987 2.0666C15.676 2.0552 14.413 2.55918 13.47 3.46997L11.75 5.17997"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"></path>
                    <path
                      d="M14 11C13.5705 10.4259 13.0226 9.9508 12.3934 9.60704C11.7642 9.26328 11.0685 9.05881 10.3533 9.00761C9.63816 8.95641 8.92037 9.05961 8.24861 9.31018C7.57685 9.56077 6.96684 9.95295 6.45996 10.46L3.45996 13.46C2.54917 14.403 2.04519 15.666 2.0566 16.977C2.06801 18.288 2.59385 19.542 3.52089 20.469C4.44793 21.3961 5.702 21.9219 7.01298 21.9333C8.32396 21.9447 9.58697 21.4407 10.53 20.53L12.24 18.82"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"></path>
                  </svg>
                </button>
              </div>
              <div class="copy-feedback" id="copy-feedback">
                {t.linkCopied}
              </div>
            </div>
          </div>
        </aside>
      </div>
    </div>
  </section>
</Layout>
<style>
  /* Breadcrumb */
  .breadcrumb {
    padding: 2rem 0 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
  }

  .breadcrumb a {
    color: rgba(255, 255, 255, 0.7);
    text-decoration: none;
    transition: color 0.2s;
  }

  .breadcrumb a:hover {
    color: var(--blue-primary);
  }

  .breadcrumb .separator {
    color: rgba(255, 255, 255, 0.4);
  }

  .breadcrumb span:last-child {
    color: white;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    max-width: 300px;
  }

  /* Campaign Detail */
  .campaign-detail {
    padding: 2rem 0 6rem;
  }

  .campaign-grid {
    display: grid;
    grid-template-columns: 1fr 420px;
    gap: 3rem;
    align-items: start;
  }

  /* Main Column */
  .main-column {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  /* Hero Image */
  .hero-image {
    border-radius: var(--radius-xl);
    overflow: hidden;
    position: relative;
    aspect-ratio: 16 / 9;
  }

  .hero-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .image-overlay {
    position: absolute;
    top: 1.5rem;
    left: 1.5rem;
    right: 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: start;
  }

  .country-badge,
  .status-badge {
    padding: 0.5rem 1rem;
    border-radius: var(--radius-md);
    font-weight: 600;
    font-size: 0.875rem;
    backdrop-filter: blur(10px);
  }

  .country-badge {
    background: rgba(0, 0, 0, 0.5);
    color: white;
  }

  .status-badge {
    background: rgba(255, 255, 255, 0.1);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .status-active {
    background: rgba(52, 199, 89, 0.2);
    border-color: rgba(52, 199, 89, 0.4);
    color: #34c759;
  }

  .status-paused {
    background: rgba(255, 149, 0, 0.2);
    border-color: rgba(255, 149, 0, 0.4);
    color: #ff9500;
  }

  /* Gallery */
  .gallery-thumbnails {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 1rem;
  }

  .thumbnail {
    aspect-ratio: 1;
    border-radius: var(--radius-md);
    overflow: hidden;
    cursor: pointer;
    transition: all 0.2s;
    border: 2px solid transparent;
    padding: 0;
  }

  .thumbnail:hover {
    border-color: var(--blue-primary);
    transform: scale(1.05);
  }

  .thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  /* Campaign Header */
  .campaign-header h1 {
    font-size: clamp(2rem, 4vw, 2.5rem);
    font-weight: 800;
    color: white;
    margin-bottom: 0.75rem;
    line-height: 1.2;
  }

  .created-by {
    color: rgba(255, 255, 255, 0.7);
    font-size: 1.05rem;
  }

  .created-by strong {
    color: var(--blue-primary);
    font-weight: 600;
  }

  /* Section Cards */
  .section-card {
    padding: 2.5rem;
    border-radius: var(--radius-lg);
  }

  .section-card h2 {
    color: white;
    font-size: 1.75rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
  }

  .description p {
    color: rgba(255, 255, 255, 0.85);
    font-size: 1.05rem;
    line-height: 1.8;
    margin-bottom: 1rem;
  }

  /* Beneficiaries */
  .beneficiaries-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .beneficiary-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.03);
    border-radius: var(--radius-md);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .beneficiary-avatar {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background: var(--blue-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 700;
    font-size: 1.25rem;
  }

  .beneficiary-info {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .beneficiary-info strong {
    color: white;
    font-size: 1.05rem;
  }

  .beneficiary-info .share {
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.9rem;
  }

  /* Diagnosis */
  .diagnosis-images {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .diagnosis-image {
    aspect-ratio: 1;
    border-radius: var(--radius-md);
    overflow: hidden;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .diagnosis-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .diagnosis-note {
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.9rem;
    font-style: italic;
  }

  /* Donation Sidebar */
  .donation-sidebar {
    position: sticky;
    top: 100px;
  }

  .donation-card {
    padding: 2rem;
    border-radius: var(--radius-lg);
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  /* Amount Raised */
  .amount-raised {
    text-align: center;
  }

  .current-amount {
    font-size: 2.5rem;
    font-weight: 800;
    color: white;
    line-height: 1;
    margin-bottom: 0.5rem;
  }

  .goal-text {
    color: rgba(255, 255, 255, 0.7);
    font-size: 1.05rem;
  }

  /* Progress Bar */
  .progress-container {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .progress-bar {
    position: relative;
    height: 12px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 999px;
    overflow: visible;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #007aff 0%, #00d4ff 100%);
    border-radius: 999px;
    transition: width 1s ease;
  }

  .cap-marker {
    position: absolute;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 4px;
    height: 20px;
    background: white;
    border-radius: 2px;
  }

  .cap-marker::before {
    content: "";
    position: absolute;
    top: -4px;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 6px solid transparent;
    border-right: 6px solid transparent;
    border-top: 6px solid white;
  }

  .cap-label {
    position: absolute;
    top: -30px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 0.75rem;
    white-space: nowrap;
    color: rgba(255, 255, 255, 0.8);
    font-weight: 600;
  }

  .progress-stats {
    text-align: right;
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.9rem;
    font-weight: 500;
  }

  /* Caps Info */
  .caps-info {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }

  .cap-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.03);
    border-radius: var(--radius-md);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .cap-icon {
    font-size: 1.5rem;
  }

  .cap-name {
    font-size: 0.85rem;
    color: rgba(255, 255, 255, 0.6);
  }

  .cap-value {
    font-size: 1.1rem;
    font-weight: 700;
    color: white;
  }

  /* Donate Section */
  .donate-section h3 {
    color: white;
    font-size: 1.25rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
  }

  .select-amount-text {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.95rem;
    margin-bottom: 1rem;
  }

  .amount-buttons {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 0.75rem;
    margin-bottom: 1.5rem;
  }

  .amount-btn {
    padding: 1rem;
    background: rgba(255, 255, 255, 0.05);
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: var(--radius-md);
    color: white;
    font-weight: 600;
    font-size: 1.1rem;
    cursor: pointer;
    transition: all 0.2s;
  }

  .amount-btn:hover,
  .amount-btn.active {
    background: rgba(0, 122, 255, 0.1);
    border-color: var(--blue-primary);
    color: var(--blue-primary);
  }

  .custom-amount label {
    display: block;
    color: white;
    font-weight: 500;
    margin-bottom: 0.5rem;
    font-size: 0.95rem;
  }

  .custom-input-wrapper {
    position: relative;
  }

  .currency-symbol {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: rgba(255, 255, 255, 0.5);
    font-weight: 600;
    font-size: 1.1rem;
  }

  #custom-amount {
    width: 100%;
    padding: 1rem 1rem 1rem 2.5rem;
    background: rgba(255, 255, 255, 0.05);
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: var(--radius-md);
    color: white;
    font-size: 1.1rem;
    font-weight: 600;
    font-family: inherit;
    transition: all 0.2s;
  }

  #custom-amount:focus {
    outline: none;
    border-color: var(--blue-primary);
    background: rgba(255, 255, 255, 0.08);
  }

  .minimum-note {
    color: rgba(255, 255, 255, 0.5);
    font-size: 0.85rem;
    margin-top: 0.5rem;
  }

  .donate-button {
    width: 100%;
    padding: 1.25rem 2rem;
    background: var(--blue-primary);
    border: none;
    border-radius: var(--radius-md);
    color: white;
    font-weight: 700;
    font-size: 1.1rem;
    cursor: pointer;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    margin-top: 0.5rem;
  }

  .donate-button:hover {
    background: var(--blue-light);
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(0, 122, 255, 0.3);
  }

  /* Campaign Details */
  .campaign-details h3,
  .share-section h3 {
    color: white;
    font-size: 1.1rem;
    font-weight: 700;
    margin-bottom: 1rem;
  }

  .detail-item {
    display: flex;
    justify-content: space-between;
    padding: 0.75rem 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .detail-item:last-child {
    border-bottom: none;
  }

  .detail-label {
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.95rem;
  }

  .detail-value {
    color: white;
    font-weight: 500;
    font-size: 0.95rem;
  }

  /* Share Section */
  .share-buttons {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 0.75rem;
  }

  .share-btn {
    aspect-ratio: 1;
    padding: 0;
    border: none;
    border-radius: var(--radius-md);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s;
  }

  .share-btn.whatsapp {
    background: rgba(37, 211, 102, 0.1);
    color: #25d366;
  }

  .share-btn.twitter {
    background: rgba(29, 155, 240, 0.1);
    color: #1da1f2;
  }

  .share-btn.facebook {
    background: rgba(24, 119, 242, 0.1);
    color: #1877f2;
  }

  .share-btn.copy {
    background: rgba(255, 255, 255, 0.1);
    color: white;
  }

  .share-btn:hover {
    transform: translateY(-2px);
    opacity: 0.8;
  }

  .copy-feedback {
    text-align: center;
    color: var(--blue-primary);
    font-size: 0.9rem;
    font-weight: 600;
    opacity: 0;
    transition: opacity 0.3s;
    margin-top: 0.5rem;
  }

  .copy-feedback.show {
    opacity: 1;
  }

  /* Animations */
  [data-animate] {
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.6s ease;
  }

  [data-animate].visible {
    opacity: 1;
    transform: translateY(0);
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .campaign-grid {
      grid-template-columns: 1fr;
    }

    .donation-sidebar {
      position: static;
    }
  }
  .conversion-note {
    font-size: 0.85rem;
    color: rgba(255, 255, 255, 0.6);
    margin-top: 0.5rem;
  }

  .currency-notice {
    background: rgba(255, 193, 7, 0.1);
    border: 1px solid rgba(255, 193, 7, 0.3);
    border-radius: 8px;
    padding: 12px;
    color: #f59e0b;
    font-size: 0.9rem;
    margin-bottom: 1rem;
    text-align: center;
  }
  @media (max-width: 768px) {
    .section-card {
      padding: 1.5rem;
    }

    .donation-card {
      padding: 1.5rem;
    }

    .current-amount {
      font-size: 2rem;
    }

    .amount-buttons {
      grid-template-columns: repeat(2, 1fr);
    }

    .caps-info {
      grid-template-columns: 1fr;
    }

    .gallery-thumbnails {
      grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
    }
  }
</style>

<script
  define:vars={{
    campaign,
    supabaseUrl: import.meta.env.PUBLIC_SUPABASE_URL,
    supabaseKey: import.meta.env.PUBLIC_SUPABASE_ANON_KEY,
  }}
>
  // Intersection Observer for animations
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("visible");
        }
      });
    },
    { threshold: 0.1 },
  );

  document.querySelectorAll("[data-animate]").forEach((el) => {
    observer.observe(el);
  });

  // Amount button selection
  const amountBtns = document.querySelectorAll(".amount-btn");
  const customInput = document.getElementById("custom-amount");
  let selectedAmount = 0;

  amountBtns.forEach((btn) => {
    btn.addEventListener("click", () => {
      amountBtns.forEach((b) => b.classList.remove("active"));
      btn.classList.add("active");
      selectedAmount = parseInt(btn.getAttribute("data-amount") || "0");
      if (customInput) customInput.value = "";
    });
  });

    customInput?.addEventListener('input', () => {
      amountBtns.forEach(b => b.classList.remove('active'));
      
      // ‚úÖ FORZAR SOLO N√öMEROS ENTEROS
      let value = customInput.value.replace(/[^0-9]/g, '');
      customInput.value = value;
      selectedAmount = parseInt(value) || 0;
    });

  // Donate button with Stripe Checkout
  document.getElementById("donate-btn")?.addEventListener("click", async () => {
    const btn = document.getElementById("donate-btn");
    const originalText = btn?.textContent || "Donate Now";

    let amount = selectedAmount;

    if (!amount && customInput?.value) {
      amount = parseInt(customInput.value) || 0;
    }

    if (amount < 5) {
      alert("Minimum donation is $5");
      return;
    }

    try {
      const campaignId = window.location.pathname.split("/").pop();

      if (btn) {
        btn.textContent = "Processing...";
        btn.disabled = true;
        btn.style.opacity = "0.6";
      }

      // ‚úÖ ENVIAR MONTO EN CENTAVOS (Stripe maneja la conversi√≥n)
      const response = await fetch(
        `${supabaseUrl}/functions/v1/stripe-checkout-session`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${supabaseKey}`,
          },
          body: JSON.stringify({
            campaignId,
            amount: amount * 100, // Siempre en centavos
          }),
        },
      );

      const data = await response.json();

      if (!response.ok || data.error) {
        throw new Error(data.error || "Failed to create checkout session");
      }

      window.location.href = data.url;
    } catch (error) {
      console.error("Checkout error:", error);
      alert("Error processing donation. Please try again.");

      if (btn) {
        btn.textContent = originalText;
        btn.disabled = false;
        btn.style.opacity = "1";
      }
    }
  });

  // Share buttons
  const shareButtons = document.querySelectorAll("[data-share]");
  const copyFeedback = document.getElementById("copy-feedback");

  shareButtons.forEach((btn) => {
    btn.addEventListener("click", () => {
      const type = btn.getAttribute("data-share");
      const url = window.location.href;
      const title =
        document.querySelector("h1")?.textContent || "Support this campaign";

      switch (type) {
        case "whatsapp":
          window.open(
            `https://wa.me/?text=${encodeURIComponent(title + " - " + url)}`,
            "_blank",
          );
          break;
        case "twitter":
          window.open(
            `https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}&text=${encodeURIComponent(title)}`,
            "_blank",
          );
          break;
        case "facebook":
          window.open(
            `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`,
            "_blank",
          );
          break;
        case "copy":
          navigator.clipboard.writeText(url).then(() => {
            if (copyFeedback) {
              copyFeedback.classList.add("show");
              setTimeout(() => copyFeedback.classList.remove("show"), 2000);
            }
          });
          break;
      }
    });
  });

  // Gallery thumbnails
  const thumbnails = document.querySelectorAll(".thumbnail");
  const heroImage = document.querySelector(".hero-image img");

  thumbnails.forEach((thumb) => {
    thumb.addEventListener("click", () => {
      const img = thumb.querySelector("img");
      if (heroImage && img) {
        heroImage.src = img.src;
      }
    });
  });

  // Handle success/cancel from Stripe
  const urlParams = new URLSearchParams(window.location.search);

  if (urlParams.get("success")) {
    alert("Thank you for your donation! ‚ù§Ô∏è");
    window.history.replaceState({}, "", window.location.pathname);
  }

  if (urlParams.get("canceled")) {
    alert("Donation canceled. Feel free to try again.");
    window.history.replaceState({}, "", window.location.pathname);
  }
</script>
